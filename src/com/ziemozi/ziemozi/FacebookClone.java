package com.ziemozi.ziemozi;


import com.cloudinary.Cloudinary;
import com.cloudinary.utils.ObjectUtils;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.ConnectionRequest.CachingMode;
import static com.codename1.io.ConnectionRequest.setDefaultCacheMode;
import com.ziemozi.server.ServerAPI;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import com.codename1.io.Preferences;
import com.codename1.push.Push;
import com.codename1.push.PushCallback;
import com.codename1.io.File;
import com.codename1.io.FileSystemStorage;
import com.codename1.io.Util;
import com.codename1.ui.BrowserComponent;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.webserver.WebServer;
import java.io.IOException;
import java.io.ByteArrayInputStream;
import java.io.OutputStream;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class FacebookClone implements PushCallback {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);
        setDefaultCacheMode(CachingMode.SMART);
        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
         server = new WebServer(new File("httpdocs").getAbsolutePath(), 8888);
    }
    private WebServer server;
      private void initWebsite() throws IOException {
        FileSystemStorage fs = FileSystemStorage.getInstance();
        File docRoot = new File("httpdocs");
        delTree(docRoot);
        docRoot.mkdir();
        String helloContent = "<!doctype html><html><head><title>Ziemozi</title></head><body><h1>Hello World</h1></body></html>";
        File indexHtml = new File(docRoot, "index.html");
        writeStringToFile(indexHtml, helloContent);
        
    }
    
    private void writeStringToFile(File file, String content) throws IOException {
        FileSystemStorage fs = FileSystemStorage.getInstance();
        try (OutputStream os = fs.openOutputStream(file.getAbsolutePath())) {
            Util.copy(new ByteArrayInputStream(content.getBytes("UTF-8")), os);
        }
        
    }
    
    private void delTree(File file) {
        if (file.isDirectory()) {
            for (File f : file.listFiles()) {
                delTree(f);
            }
        }
        file.delete();
    }
    

    public void start() {
        if(current != null){
            current.show();
            return;
        }
                server.start();
        Form hi = new Form("Hi World", new BorderLayout());
        BrowserComponent bc = new BrowserComponent();
        bc.setURL("http://localhost:8888/index.html");
        hi.add(BorderLayout.CENTER, bc);
        
        hi.show();
        /*
        UIController.showSplashScreen();
        if(ServerAPI.isLoggedIn()) {
            callSerially(() -> registerPush());
        }
*/
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
        server.stop();
    }
    
    public void destroy() {
    }

    @Override
    public void push(String value) {
        UIController.refresh();
    }

    @Override
    public void registeredForPush(String deviceId) {
        String pk = Preferences.get("pushkey", "");
        if(!pk.equals(Push.getPushKey())) {
            if(ServerAPI.updatePushKey(pk)) {
                Preferences.set("pushkey", Push.getPushKey());
            }
        }
    }

    @Override
    public void pushRegistrationError(String error, int errorCode) {
        //////log.p("Failed to register for push: " + error);
    }
}
