package com.ziemozi.ziemoziapp;

import com.codename1.components.ToastBar;
import com.codename1.io.ConnectionRequest.CachingMode;
import com.codename1.io.Log;
import com.codename1.io.Preferences;
import com.codename1.push.Push;
import com.codename1.push.PushCallback;
import com.codename1.startapp.StartAppManager;
import com.codename1.ui.Dialog;
import com.codename1.ui.Form;
import com.codename1.ui.Toolbar;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.ziemozi.server.ServerAPI;
import com.ziemozi.ziemozi.UIController;

import static com.codename1.io.ConnectionRequest.setDefaultCacheMode;
import static com.codename1.io.Log.REPORTING_DEBUG;
import static com.codename1.ui.CN.addNetworkErrorListener;
import static com.codename1.ui.CN.callSerially;
import static com.codename1.ui.CN.getCurrentForm;
import static com.codename1.ui.CN.registerPush;
import static com.codename1.ui.CN.updateNetworkThreadCount;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class Ziemozi implements PushCallback {

    private Form current;
    private Resources theme;
    public StartAppManager manager;
    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);
        //
        //initialize random number generatr

        theme = UIManager.initFirstTheme("/theme");
        manager = new StartAppManager();
        manager.initAndroidSDK("200083762", "141359216", true);
        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);
        manager.loadAd(StartAppManager.AD_INTERSTITIALS);
        // Pro only feature
        Log.bindCrashProtection(true);
        Log.setReportingLevel(REPORTING_DEBUG);

        setDefaultCacheMode(CachingMode.OFF);
      
addNetworkErrorListener(err -> {
            // prevent the event from propagating
            //////Log.p(err.getMessage());
            Log.sendLogAsync();
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            ToastBar.showErrorMessage("Network not availavle");
        }
        
        );

    }

    public void start() {
        if (current != null) {

            current.show();
            return;
        }

        UIController.showSplashScreen();

        if (ServerAPI.isLoggedIn()) {
            manager.showAd();
            callSerially(() -> registerPush());
        }

    }

    public void stop() {
        //ToastBar.showInfoMessage("Syncing with Server");
        //ServerAPI.loadToLocalDatabase();
        //localAPI.saveRequestsToServer(); 

        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }

    }

    public void destroy() {
    }

    @Override
    public void push(String value) {
        UIController.refresh();
    }

    @Override
    public void registeredForPush(String deviceId) {
        String pk = Preferences.get("pushkey", "");
        if (!pk.equals(Push.getPushKey())) {
            if (ServerAPI.updatePushKey(pk)) {
                Preferences.set("pushkey", Push.getPushKey());
            }
        }
    }

    @Override
    public void pushRegistrationError(String error, int errorCode) {
        //////Log.p("Failed to register for push: " + error);
    }

    
}
